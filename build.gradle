/*buildscript {
    repositories {
        maven { url "http://maven.aliyun.com/nexus/content/groups/public" }
    }
    dependencies {
        classpath "com.github.jengelman.gradle.plugins:shadow:1.2.3"
    }
}

plugins {
    id 'org.hidetake.ssh' version '2.9.0'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.12'
}
*/



apply plugin: "java"
//apply plugin: 'idea'
apply plugin: 'application'

version='1.0'
description='spark study'
//apply plugin: "com.github.johnrengelman.shadow"


[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'



compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

compileTestJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

repositories {
    maven { url "http://maven.aliyun.com/nexus/content/groups/public" }
}

ext {
    sparkVersion = '1.6.0'
    scalaVersion = '2.10.5'
    flinkVersion = '1.9.0'
}

dependencies {
    //// Spark ////
    compile "org.apache.spark:spark-core_2.11:$sparkVersion"
    compile "org.apache.spark:spark-streaming_2.11:$sparkVersion"
    ///flink///
    compile "org.apache.flink:flink-java:$flinkVersion"
    compile "org.apache.flink:flink-streaming-java_2.11:$flinkVersion"
    compile "org.apache.flink:flink-clients_2.11:$flinkVersion"
    //// Scala lib ////
    compile "org.scala-lang:scala-library:$scalaVersion"
    //javassist
    compile 'org.javassist:javassist:3.22.0-GA'
    compile 'org.apache.poi:poi-ooxml:3.17-beta1'
    //juint
    compile 'junit:junit:4.12'
}

jar{
    from('src/main/java') {
        exclude '*.properties'
    }
    manifest {
        attributes(
                'Implemention-Title': project.name,
                'Implemention-Version': project.version,
                'Implemention-Build': new Date(),
                'Description': project.description
        )
    }
}

mainClassName = 'ApplicationMain'

task doPackage(type: Tar) {
    delete 'build/package'

    destinationDir = file('build/package')
    archiveName = "spark_study-install-runtime-$project.version-allsystem-"+String.format('%1$tY%1$tm%1$td',new Date()) + '.tar.gz'
    baseName = "spark_study-install-$project.version"
    compression=Compression.GZIP

    from(project.libsDir) {
        into(baseName + '/lib/')
    }

    from(configurations.runtime){
        exclude('*.properties')
        into(baseName + '/lib/')
    }

    from('bin'){
        into(baseName + '/bin/')
    }
    from('conf'){
        into(baseName + '/conf/')
    }

}

doPackage.dependsOn(clean,jar)


/*artifacts {
    shadowJar
}*/

/*
build.dependsOn(shadowJar)


String HTableConstantFile = 'src/main/java/com/weshare/ganglia/constants/HTableConstant.java'
String username= System.properties['user.name']
*/

/*task removeQa {
    doLast {
        ant.replace(file: HTableConstantFile, token: '_qa', value: '')
    }
}*/

/*task addQa(dependsOn: removeQa) {
    doLast {
        ant.replaceregexp(file: HTableConstantFile, match: 'fk:(.*?)"', replace: 'fk:\\1_qa"', flags: 'g', byline: true)
    }
}*/

/*ssh.settings {
    dryRun = project.hasProperty('dryRun')
    knownHosts = allowAnyHosts
}*/

/*remotes {
    deployServer {
        role 'webServers'
        host = ''
        user = ''
        //to be modified
        identity = file('C:///')
        passphrase = '2zhlmcL#'
        timeoutSec = 600
        keepAliveSec = 600
    }
}*/

//for local test
/*String gangliaLocalFile = 'src/main/resources/ganglia-local.properties'
String ApplicationFile = 'src/main/java/com/weshare/ganglia/Application.java'
task removeLocalTest(dependsOn: removeQa) {
    doLast {
        ant.replace(file: gangliaLocalFile, token: '_' + username, value: '')
        ant.replace(file: ApplicationFile, token: 'localTest();removeLog();', value: '')
    }
}*/

/*task addLocalTest(dependsOn: [removeLocalTest, addQa]) {
    doLast {
        ant.replace(file: gangliaLocalFile, token: 'local_test_topic', value: 'local_test_topic_' + username)
        ant.replace(file: ApplicationFile, token: 'public static void main(String[] args) {', value: 'public static void main(String[] args) {localTest();removeLog();')
    }
}
addQa.mustRunAfter removeLocalTest*/

//to be modified
/*String name = 'phl'
task testUpload(dependsOn: [addLocalTest, shadowJar]) {
    doLast {
        ssh.run {
            session(remotes.deployServer) {
                def folder = 'ganglia-' + name
                def path = '/data/homedata/workflow/qa/allInOne/' + folder
                def jar = folder + '-' + new Date().format('MMddHH') + '-' + username + '.jar'
                def pid = execute "ps aux | grep " + folder + " |grep -v grep| awk '{print \$2}'"
                put from: 'build/libs/ganglia-all.jar', into: path + '/' + jar
                if (pid?.trim()) {
                    execute 'kill -9 ' + pid
                }
                println 'cd ' + path + '&& python start.py ' + jar
                execute 'cd ' + path + '&& python start.py ' + jar
            }
        }
    }
}
shadowJar.mustRunAfter addQa
shadowJar.mustRunAfter removeLocalTest

shadowJar.dependsOn(removeLocalTest)*/

/**
 * 创建src目录
 */
/*task createDir(){
    sourceSets*.java.srcDirs*.each{it.mkdirs()}
    sourceSets*.resources.srcDirs*.each{it.mkdirs()}
}*/

